#include <LiquidCrystal.h>  // includes the LiquidCrystal Library

LiquidCrystal lcd(1, 2, 4, 5, 6, 7);  // Creates an LCD object. Parameters: (rs, enable, d4, d5, d6, d7)

const int trigPin = 9;
const int echoPin = 10;
const int buzzerPin = 11;  // Define the buzzer pin

long duration;
int distanceCm, distanceInch;

// Define the distance range for controlling buzzer frequency
int minDistance = 1;   // Minimum distance in cm (trigger sound when within this range)
int maxDistance = 100; // Maximum distance in cm (stop sound when beyond this range)

void setup() {
  lcd.begin(16, 2);  // Initializes the LCD with 16 columns and 2 rows
  pinMode(trigPin, OUTPUT);  // Sets the trigger pin as OUTPUT
  pinMode(echoPin, INPUT);   // Sets the echo pin as INPUT
  pinMode(buzzerPin, OUTPUT); // Sets the buzzer pin as OUTPUT
}

void loop() {
  // Send a pulse to the ultrasonic sensor to measure distance
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);  // Reads the pulse duration from the echo pin

  // Calculate the distance in cm and inches
  distanceCm = duration * 0.034 / 2;
  distanceInch = duration * 0.0133 / 2;

  // Display the distance on the LCD screen
  lcd.setCursor(0, 0);  // Sets the cursor to the beginning of the first row
  lcd.print("!!NEW UPDATE!!: ");
  delay(10);

  lcd.setCursor(0, 1);  // Sets the cursor to the second row
   lcd.print("Distance: ");
  lcd.print(distanceCm);
  lcd.print(" cm");
  delay(10);

  // If the object is within the specified range, control the buzzer
  if (distanceCm >= minDistance && distanceCm <= maxDistance) {
    // Map the distance to a frequency for the buzzer (higher frequency for closer distance)
    int frequency = map(distanceCm, minDistance, maxDistance, 2000, 500); // High frequency for close, low frequency for far
    tone(buzzerPin, frequency);  // Play the sound with mapped frequency
  } else {
    // If no object is within range, turn off the buzzer
    noTone(buzzerPin);  // Stop the sound
  }
}
